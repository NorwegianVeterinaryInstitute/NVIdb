% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/standardize_columns.R
\name{standardize_columns}
\alias{standardize_columns}
\title{Standardize columns for scripts and reports}
\usage{
standardize_columns(
  data,
  dbsource = deparse(substitute(data)),
  standards = NULL,
  property,
  language = "no",
  exclude = FALSE,
  ...
)
}
\arguments{
\item{data}{[\code{data.frame} | \code{character(1)}]\cr
The data source. If \code{property = "colclasses"} the path and
    file name of the csv-file used as data source should be given.}

\item{dbsource}{[\code{character(1)}]\cr
The database that is the source of data. Should be the name of
    the data source as registered in column_standards table. Defaults
    to \code{deparse(substitute(data))}.}

\item{standards}{[\code{character(1)}]\cr
For giving alternative standard tables to column_standards.}

\item{property}{[\code{character(1)}]\cr
Property of the column that should be standardized. Must be one
    of c("colnames", "colclasses", "collabels", "colwidths_Excel",
    "colorder"). Defaults to \code{NULL}.}

\item{language}{[\code{character(1)}]\cr
Language for labels. Must be one of c("no", "en"). Defaults to "no".}

\item{exclude}{[\code{logical(1)}]\cr
Used in combination with \code{property = "colorder"}. If \code{TRUE},
    all columns with no predefined column order are excluded.
    Defaults to \code{FALSE}.}

\item{\dots}{Other arguments to be passed to
\ifelse{html}{\code{\link[utils:read.csv2]{read.csv2}}}{\code{read.csv2}}
when \code{property = "colclasses"}.}
}
\value{
\code{property = "colnames"}: A data frame with standard column names.

\code{property = "colclasses"}: A named vector of column classes to
    be used as input to functions for reading csv-files, see details.

\code{property = "collabels"}: A vector with labels for the columns
    in the data frame.

\code{property = "colwidths_Excel"}: A vector with column widths for Excel.
     To be used as input parameter to
    \ifelse{html}{\code{\link[openxlsx:setColWidths]{openxlsx::setColWidths}}}{\code{openxlsx::setColWidths}}.

\code{property = "colorder"}: A data frame with column names in predefined
    order. If \code{exclude = TRUE} only columns with a defined order is included.
}
\description{
Standardizes column names, labels, column width
    for variables in external databases.
}
\details{
The standardization table is under development. This
    function only works when being connected to the NVI network.

Variables in internal and external data sources uses
    different variable names for the same content.
    \code{standardize_columns} standardizes column names for
    use in scripts. In addition, it standardises column labels
    and column widths for Excel. Furthermore, input values for
    the parameter \code{colClasses} for
    \ifelse{html}{\code{\link[utils:read.csv2]{read.csv2}}}{\code{read.csv2}}
    and
    \ifelse{html}{\code{\link[data.table:fread]{data.table::fread}}}{\code{data.table::fread}}
    can be generated.

\code{property = "colnames"} will replace the column names
    in a data frame with standardized column names. All
    standard column names is snake_case. If no standard name
    is defined for a variable name, the variable
    name is translated to snake_case and the national characters
    c("æ", "ø", "å") are translated to
    c("ae", "oe", "aa").

\code{property = "colclasses"} will generate a named vector
    with the column classes for variables that may not be read
    correct when importing data from a csv-file. This applies
    for example to numbers with leading zero that must be imported
    as character. This vector can be used as a parameter for
    \code{colClasses}.

The default \code{fileEncoding} is assumed to be "UTF-8".
    If another encoding is needed, one must give an additional
    argument like \code{fileEncoding = "latin1"}.

\code{property = "collabels"} will generate a vector with column
    labels that can be used to replace the column names in the
    header of the data table. The column names are not standardised
    automatically but can be standardised by first using
    \code{standardize_columns} with \code{property = "colname"}.
    If no standard column label for the column name is defined,
    the column name as Sentence case is used as column label.
    If English names are used and no English column label exists,
    the Norwegian column label is used instead.

\code{property = "colwidths_Excel"} will generate a vector with
    column widths for Excel. To be used as input parameter to
    \ifelse{html}{\code{\link[openxlsx:setColWidths]{openxlsx::setColWidths}}}{\code{openxlsx::setColWidths}}.
    If no standard column width is defined, the Excel standard
    width of 10.78 is used. Be aware that the generation of column
    widths are based on the column names. Do not change the column
    names to labels before the column widths are generated.

\code{property = "colorder"} will generate a data frame with
    the column names in a predefined order. The column names
    should first have been standardised. No standard order will
    be given unless the dbsource is defined in the column_standards
    table. If \code{exclude = FALSE} (the standard) the columns
    with no predefined order will be moved to the last columns
    in the same order as they appeared in the original data frame.
    If \code{exclude = TRUE} all columns with no predefined order
    is excluded from the data frame. This option is mainly
    intended for well defined and worked through routines like
    making selections lists for the Food Safety Authority. Do
    not use \code{exclude = TRUE} unless you are certain that
    all columns that should be included are defined in the
    column_standards table for this dbsource. If uncertain,
    you may first try with \code{exclude = FALSE} and thereafter
    compare with \code{exclude = TRUE} to check if you loose
    important information.
}
\examples{
\dontrun{
# Generate data frame to be standardized
df <- cbind("\u00C5r" = 2020, "Hensiktkode" = "01001", komnr = "5001")
colnames(df)

# Standardize column names
df <- standardize_columns(data = df, property = "colnames")
colnames(df)

# Generate vector with standard labels
labels <- standardize_columns(data = df, property = "collabels")
# use the labels as column names
colnames(df) <- labels

# Generate vector with standard column widths for Excel
colwidths <- standardize_columns(data = df, property = "colwidths_Excel")
colwidths
}

}
\author{
Petter Hopp Petter.Hopp@vetinst.no
}
